---
- name: AWS Scripting
  hosts: localhost
  connection: local
  # secrets.yml file stores aws credentials
  # varfile.yml stores required variables
  vars_files:
    - varsfile.yml
    - secrets.yml
  environment:
    - ansible_python_interpreter: /usr/bin/python3.8
    - AWS_ACCESS_KEY_ID: "{{ myuser }}"
    - AWS_SECRET_ACCESS_KEY: "{{ mykey }}"

  gather_facts: false

  tasks:

  - name: Get Info ec2
    block:

    - name: Get Running instance Info
      ec2_instance_info:
        region: "{{ region }}"
      register: ec2info

    - name: Print info
      debug: var="ec2info.instances"

    tags: ['always', 'get-info']

  - name: VPC block
    block:

    - name: Create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        region: "{{ region }}"
        cidr_block: "{{ cidr_block }}"
        state: present
      register: vpcinfo

    - name: Create VPC subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        cidr: "{{ subnet_cidr }}"
        tags:
          Name: "{{ subnet_name }}"
        map_public: yes
      register: subnet

    - name: create IGW
      ec2_vpc_igw:
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw
    
    - name: Route IGW
      ec2_vpc_route_table:
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id  }}"
        tags:
          Name: "{{ route_name }}"

    - name: create Security Group
      ec2_group:
        name: "{{ sg_group }}"
        description: Security Group
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "{{ sg_name }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
          - proto: tcp
            ports:
            - 443
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 443
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22
      register: sg
    tags: ['never', 'create-vpc']

  - name: Create ec2 instance
    block:
    - name: create ec2
      ec2:
        image: "{{ image_id }}"
        wait: yes
        region: "{{ region }}"
        instance_type: "{{ instance_type }}"
        group_id: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        count_tag: "{{ count_tag }}"
        instance_tags:
          - Name: "{{ intance_name }}"
        exact_count: "{{ ec2_no }}"
        key_name: "{{ key_pair }}"
        user_data: |
          #!/bin/bash

          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install nginx wget -y

          nginx_conf() {

          openssl req -nodes -x509 \
          -newkey rsa:2048 -keyout /etc/nginx/ssl/ca.key \
          -out /etc/nginx/ssl/ca.crt -subj \
          "/C=IN/ST=UP/L=Kanpur/O=testing/OU=root/CN=`hostname -f`/emailAddress=testing2496@gmail.com"

          if [[ -e /etc/nginx/sites-available/default ]];
          then
            sudo rm -rf /etc/nginx/sites-available/default
          fi
          cat >> /etc/nginx/sites-available/default << EOF
          server {
             listen 80;
             listen [::]:80;
             server_name default_server;

             root /var/www/html;
             listen 443 ssl default_server;
             # listen [::]:443 ssl default_server;
             server_name _;
             ssl_certificate /etc/nginx/ssl/ca.crt;
             ssl_certificate_key /etc/nginx/ssl/ca.key;
             index index.php index.html index.nginx-debian.html;
             server_name _;
             location / {
                  try_files \$uri \$uri/ =404;

              }
          }
          EOF
          }
          nginx_conf

          systemctl start nginx
          systemctl enable nginx
          sudo nginx -s reload
    - name: Get Running instance Info
      ec2_instance_info:
        region: "{{ region }}"
      register: ec2info
    - name: 
    tags: ['never', 'create-ec2']
